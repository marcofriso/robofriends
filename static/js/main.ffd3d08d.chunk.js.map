{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","info","this","setState","Component","connect","searchField","searchRobots","isPending","onSearchChange","event","target","value","onRequestRobots","useEffect","filteredRobots","filter","robot","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ffd3d08d.chunk.js","sourcesContent":["import { apiCall } from \"./api/api\";\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  apiCall(\"https://jsonplaceholder.typicode.com/users\")\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n","export const apiCall = (link) =>\n  fetch(link).then((response) => response.json());\n","export const CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is no good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setSearchField, requestRobots } from \"../actions\";\n\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.css\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nconst App = (props) => {\n  const {\n    robots,\n    searchField,\n    onSearchChange,\n    isPending,\n    onRequestRobots,\n  } = props;\n\n  useEffect(() => {\n    onRequestRobots();\n  }, [onRequestRobots]);\n\n  const filteredRobots = robots.filter((robot) => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  return (\n    <div className=\"tc\">\n      <h1 className=\"f1\">RoboFriends</h1>\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        {isPending ? (\n          <h1>Loading</h1>\n        ) : (\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        )}\n      </Scroll>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: true,\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport \"tachyons\";\n\nimport App from \"./containers/App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { requestRobots, searchRobots } from \"./reducers\";\nimport \"./index.css\";\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({ requestRobots, searchRobots });\nconst store = createStore(\n  rootReducers,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}